<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.novel.book.mapper.TypeMapper">
    <resultMap type="com.novel.book.domain.Type" id="TypeResult">
        <result property="id"    column="id"    />
        <result property="pid"    column="pid"    />
        <result property="pic"    column="pic"    />
        <result property="name"    column="name"    />
        <result property="pName"    column="pName"    />
        <result property="status"    column="status"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectTypeVo">
        select type1.id, type1.pid, type1.pic, type1.name, type1.status, type1.create_time, type1.update_time,type2.name as pName from t_type type1
        left join t_type type2 on type1.pid = type2.id
    </sql>

    <select id="selectTypeList" parameterType="com.novel.book.domain.Type" resultMap="TypeResult">
        <include refid="selectTypeVo"/>
        <where>
            <if test="pid != null "> and type1.pid = #{pid}</if>
            <if test="pic != null  and pic != ''"> and type1.pic = #{pic}</if>
            <if test="name != null  and name != ''"> and type1.name like concat('%', #{name}, '%')</if>
            <if test="status != null "> and type1.status = #{status}</if>
        </where>
    </select>

    <select id="selectTypeById" parameterType="Long" resultMap="TypeResult">
        <include refid="selectTypeVo"/>
        where type1.id = #{id}
    </select>

    <insert id="insertType" parameterType="com.novel.book.domain.Type">
        insert into t_type
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="pid != null">pid,</if>
            <if test="pic != null and pic != ''">pic,</if>
            <if test="name != null and name != ''">name,</if>
            <if test="status != null">status,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="pid != null">#{pid},</if>
            <if test="pic != null and pic != ''">#{pic},</if>
            <if test="name != null and name != ''">#{name},</if>
            <if test="status != null">#{status},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateType" parameterType="com.novel.book.domain.Type">
        update t_type
        <trim prefix="SET" suffixOverrides=",">
            <if test="pid != null">pid = #{pid},</if>
            <if test="pic != null and pic != ''">pic = #{pic},</if>
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="status != null">status = #{status},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteTypeById" parameterType="Long">
        delete from t_type where id = #{id}
    </delete>

    <delete id="deleteTypeByIds" parameterType="String">
        delete from t_type where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>
